package arm.node;

@:keep class Player1Controlls extends armory.logicnode.LogicTree {

	var functionNodes:Map<String, armory.logicnode.FunctionNode>;

	var functionOutputNodes:Map<String, armory.logicnode.FunctionOutputNode>;

	public function new() {
		super();
		name = "Player1Controlls";
		this.functionNodes = new Map();
		this.functionOutputNodes = new Map();
		notifyOnAdd(add);
	}

	override public function add() {
		var _SetVariable = new armory.logicnode.SetVariableNode(this);
		var _Gate = new armory.logicnode.GateNode(this);
		_Gate.property0 = "Greater Equal";
		_Gate.property1 = 9.999999747378752e-05;
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.property0 = "Physics Pre-Update";
		_OnUpdate.addOutputs([_Gate]);
		_Gate.addInput(_OnUpdate, 0);
		var _VectorMath = new armory.logicnode.VectorMathNode(this);
		_VectorMath.property0 = "Length";
		var _GetVelocity = new armory.logicnode.GetVelocityNode(this);
		_GetVelocity.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetVelocity.addOutputs([_VectorMath]);
		_GetVelocity.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_VectorMath.addInput(_GetVelocity, 0);
		_VectorMath.addInput(new armory.logicnode.VectorNode(this, 0.5, 0.5, 0.5), 0);
		_VectorMath.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_VectorMath.addOutputs([_Gate]);
		_Gate.addInput(_VectorMath, 1);
		var _Float_001 = new armory.logicnode.FloatNode(this);
		_Float_001.addInput(new armory.logicnode.FloatNode(this, 20.0), 0);
		_Float_001.addOutputs([_Gate]);
		_Gate.addInput(_Float_001, 0);
		_Gate.addOutputs([_SetVariable]);
		var _SetVariable_001 = new armory.logicnode.SetVariableNode(this);
		_SetVariable_001.addInput(_Gate, 1);
		var _Float_002 = new armory.logicnode.FloatNode(this);
		_Float_002.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Multiply";
		_Math_001.property1 = "false";
		var _Float = new armory.logicnode.FloatNode(this);
		_Float.addInput(new armory.logicnode.FloatNode(this, 30.0), 0);
		_Float.addOutputs([_Math_001]);
		_Math_001.addInput(_Float, 0);
		_Math_001.addInput(_Float_002, 0);
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Multiply";
		_Math.property1 = "false";
		_Math.addInput(_Math_001, 0);
		_Math.addInput(new armory.logicnode.FloatNode(this, -1.0), 0);
		var _Vector_001 = new armory.logicnode.VectorNode(this);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_001.addInput(_Math, 0);
		_Vector_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _ApplyForce_001 = new armory.logicnode.ApplyForceNode(this);
		var _OnKeyboard_001 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_001.property0 = "Down";
		_OnKeyboard_001.property1 = "a";
		_OnKeyboard_001.addOutputs([_ApplyForce_001]);
		_ApplyForce_001.addInput(_OnKeyboard_001, 0);
		_ApplyForce_001.addInput(new armory.logicnode.ObjectNode(this, "Player_1"), 0);
		_ApplyForce_001.addInput(_Vector_001, 0);
		_ApplyForce_001.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Vector_001.addOutputs([_ApplyForce_001]);
		var _Vector_003 = new armory.logicnode.VectorNode(this);
		_Vector_003.addInput(_Math, 0);
		_Vector_003.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_003.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _ApplyForce_002 = new armory.logicnode.ApplyForceNode(this);
		var _OnKeyboard_003 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_003.property0 = "Down";
		_OnKeyboard_003.property1 = "s";
		_OnKeyboard_003.addOutputs([_ApplyForce_002]);
		_ApplyForce_002.addInput(_OnKeyboard_003, 0);
		_ApplyForce_002.addInput(new armory.logicnode.ObjectNode(this, "Player_1"), 0);
		_ApplyForce_002.addInput(_Vector_003, 0);
		_ApplyForce_002.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce_002.addOutputs([new armory.logicnode.NullNode(this)]);
		_Vector_003.addOutputs([_ApplyForce_002]);
		_Math.addOutputs([_Vector_001, _Vector_003]);
		var _Vector_002 = new armory.logicnode.VectorNode(this);
		_Vector_002.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector_002.addInput(_Math_001, 0);
		_Vector_002.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _ApplyForce = new armory.logicnode.ApplyForceNode(this);
		var _OnKeyboard = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard.property0 = "Down";
		_OnKeyboard.property1 = "d";
		_OnKeyboard.addOutputs([_ApplyForce]);
		_ApplyForce.addInput(_OnKeyboard, 0);
		_ApplyForce.addInput(new armory.logicnode.ObjectNode(this, "Player_1"), 0);
		_ApplyForce.addInput(_Vector_002, 0);
		_ApplyForce.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce.addOutputs([new armory.logicnode.NullNode(this)]);
		_Vector_002.addOutputs([_ApplyForce]);
		var _Vector = new armory.logicnode.VectorNode(this);
		_Vector.addInput(_Math_001, 0);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _ApplyForce_003 = new armory.logicnode.ApplyForceNode(this);
		var _OnKeyboard_002 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_002.property0 = "Down";
		_OnKeyboard_002.property1 = "w";
		_OnKeyboard_002.addOutputs([_ApplyForce_003]);
		_ApplyForce_003.addInput(_OnKeyboard_002, 0);
		_ApplyForce_003.addInput(new armory.logicnode.ObjectNode(this, "Player_1"), 0);
		_ApplyForce_003.addInput(_Vector, 0);
		_ApplyForce_003.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce_003.addOutputs([new armory.logicnode.NullNode(this)]);
		_Vector.addOutputs([_ApplyForce_003]);
		_Math_001.addOutputs([_Math, _Vector_002, _Vector]);
		_Float_002.addOutputs([_SetVariable, _SetVariable_001, _Math_001]);
		_SetVariable_001.addInput(_Float_002, 0);
		var _Float_004 = new armory.logicnode.FloatNode(this);
		_Float_004.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		_Float_004.addOutputs([_SetVariable_001]);
		_SetVariable_001.addInput(_Float_004, 0);
		_SetVariable_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Gate.addOutputs([_SetVariable_001]);
		_SetVariable.addInput(_Gate, 0);
		_SetVariable.addInput(_Float_002, 0);
		var _Float_003 = new armory.logicnode.FloatNode(this);
		_Float_003.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Float_003.addOutputs([_SetVariable]);
		_SetVariable.addInput(_Float_003, 0);
		_SetVariable.addOutputs([new armory.logicnode.NullNode(this)]);
		var _ApplyForce_004 = new armory.logicnode.ApplyForceNode(this);
		var _Gate_002 = new armory.logicnode.GateNode(this);
		_Gate_002.property0 = "Less Equal";
		_Gate_002.property1 = 9.999999747378752e-05;
		var _OnKeyboard_004 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_004.property0 = "Started";
		_OnKeyboard_004.property1 = "shift";
		_OnKeyboard_004.addOutputs([_Gate_002]);
		_Gate_002.addInput(_OnKeyboard_004, 0);
		var _GetDistance = new armory.logicnode.GetDistanceNode(this);
		_GetDistance.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		_GetDistance.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetDistance.addOutputs([_Gate_002]);
		_Gate_002.addInput(_GetDistance, 0);
		var _Float_005 = new armory.logicnode.FloatNode(this);
		_Float_005.addInput(new armory.logicnode.FloatNode(this, 5.0), 0);
		var _Gate_003 = new armory.logicnode.GateNode(this);
		_Gate_003.property0 = "Less Equal";
		_Gate_003.property1 = 9.999999747378752e-05;
		var _OnKeyboard_005 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_005.property0 = "Started";
		_OnKeyboard_005.property1 = "c";
		_OnKeyboard_005.addOutputs([_Gate_003]);
		_Gate_003.addInput(_OnKeyboard_005, 0);
		var _GetDistance_001 = new armory.logicnode.GetDistanceNode(this);
		_GetDistance_001.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		_GetDistance_001.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetDistance_001.addOutputs([_Gate_003]);
		_Gate_003.addInput(_GetDistance_001, 0);
		_Gate_003.addInput(_Float_005, 0);
		var _ApplyForce_005 = new armory.logicnode.ApplyForceNode(this);
		_ApplyForce_005.addInput(_Gate_003, 0);
		_ApplyForce_005.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		var _VectorMath_006 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_006.property0 = "Multiply";
		var _VectorMath_005 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_005.property0 = "Normalize";
		var _VectorMath_004 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_004.property0 = "Subtract";
		var _GetLocation_004 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_004.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		_GetLocation_004.addOutputs([_VectorMath_004]);
		_VectorMath_004.addInput(_GetLocation_004, 0);
		var _VectorMath_007 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_007.property0 = "Subtract";
		var _GetLocation_002 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_002.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation_002.addOutputs([_VectorMath_007]);
		_VectorMath_007.addInput(_GetLocation_002, 0);
		_VectorMath_007.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 5.0), 0);
		_VectorMath_007.addOutputs([_VectorMath_004]);
		_VectorMath_007.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_004.addInput(_VectorMath_007, 0);
		_VectorMath_004.addOutputs([_VectorMath_005]);
		_VectorMath_004.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_005.addInput(_VectorMath_004, 0);
		_VectorMath_005.addInput(new armory.logicnode.VectorNode(this, 0.5, 0.5, 0.5), 0);
		_VectorMath_005.addOutputs([_VectorMath_006]);
		_VectorMath_005.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_006.addInput(_VectorMath_005, 0);
		_VectorMath_006.addInput(new armory.logicnode.VectorNode(this, 600.0, 600.0, 600.0), 0);
		_VectorMath_006.addOutputs([_ApplyForce_005]);
		_VectorMath_006.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_ApplyForce_005.addInput(_VectorMath_006, 0);
		_ApplyForce_005.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_ApplyForce_005.addOutputs([new armory.logicnode.NullNode(this)]);
		_Gate_003.addOutputs([_ApplyForce_005]);
		_Gate_003.addOutputs([new armory.logicnode.NullNode(this)]);
		_Float_005.addOutputs([_Gate_002, _Gate_003]);
		_Gate_002.addInput(_Float_005, 0);
		_Gate_002.addOutputs([_ApplyForce_004]);
		_Gate_002.addOutputs([new armory.logicnode.NullNode(this)]);
		_ApplyForce_004.addInput(_Gate_002, 0);
		_ApplyForce_004.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		var _VectorMath_003 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_003.property0 = "Multiply";
		var _VectorMath_002 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_002.property0 = "Normalize";
		var _VectorMath_001 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_001.property0 = "Subtract";
		var _GetLocation_003 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_003.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		_GetLocation_003.addOutputs([_VectorMath_001]);
		_VectorMath_001.addInput(_GetLocation_003, 0);
		var _GetLocation_001 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_001.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation_001.addOutputs([_VectorMath_001]);
		_VectorMath_001.addInput(_GetLocation_001, 0);
		_VectorMath_001.addOutputs([_VectorMath_002]);
		_VectorMath_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_002.addInput(_VectorMath_001, 0);
		_VectorMath_002.addInput(new armory.logicnode.VectorNode(this, 0.5, 0.5, 0.5), 0);
		_VectorMath_002.addOutputs([_VectorMath_003]);
		_VectorMath_002.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_003.addInput(_VectorMath_002, 0);
		_VectorMath_003.addInput(new armory.logicnode.VectorNode(this, 1000.0, 1000.0, 1000.0), 0);
		_VectorMath_003.addOutputs([_ApplyForce_004]);
		_VectorMath_003.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_ApplyForce_004.addInput(_VectorMath_003, 0);
		_ApplyForce_004.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_ApplyForce_004.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetVariable_002 = new armory.logicnode.SetVariableNode(this);
		var _Gate_001 = new armory.logicnode.GateNode(this);
		_Gate_001.property0 = "Equal";
		_Gate_001.property1 = 9.999999747378752e-05;
		var _ArrayLoop = new armory.logicnode.ArrayLoopNode(this);
		var _OnKeyboard_006 = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard_006.property0 = "Started";
		_OnKeyboard_006.property1 = "q";
		_OnKeyboard_006.addOutputs([_ArrayLoop]);
		_ArrayLoop.addInput(_OnKeyboard_006, 0);
		var _GetContacts = new armory.logicnode.GetContactsNode(this);
		_GetContacts.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetContacts.addOutputs([_ArrayLoop]);
		_ArrayLoop.addInput(_GetContacts, 0);
		_ArrayLoop.addOutputs([_Gate_001]);
		_ArrayLoop.addOutputs([_Gate_001]);
		var _IsTrue = new armory.logicnode.IsTrueNode(this);
		_IsTrue.addInput(_ArrayLoop, 2);
		var _Boolean = new armory.logicnode.BooleanNode(this);
		_Boolean.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		var _SetVariable_003 = new armory.logicnode.SetVariableNode(this);
		var _ApplyForce_006 = new armory.logicnode.ApplyForceNode(this);
		_ApplyForce_006.addInput(_IsTrue, 0);
		_ApplyForce_006.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_ApplyForce_006.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 350.0), 0);
		_ApplyForce_006.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_ApplyForce_006.addOutputs([_SetVariable_003]);
		_SetVariable_003.addInput(_ApplyForce_006, 0);
		_SetVariable_003.addInput(_Boolean, 0);
		var _Boolean_002 = new armory.logicnode.BooleanNode(this);
		_Boolean_002.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_Boolean_002.addOutputs([_SetVariable_003]);
		_SetVariable_003.addInput(_Boolean_002, 0);
		_SetVariable_003.addOutputs([new armory.logicnode.NullNode(this)]);
		_Boolean.addOutputs([_SetVariable_002, _IsTrue, _SetVariable_003]);
		_IsTrue.addInput(_Boolean, 0);
		_IsTrue.addOutputs([_ApplyForce_006]);
		_ArrayLoop.addOutputs([_IsTrue]);
		_Gate_001.addInput(_ArrayLoop, 0);
		_Gate_001.addInput(_ArrayLoop, 1);
		var _Object = new armory.logicnode.ObjectNode(this);
		_Object.addInput(new armory.logicnode.ObjectNode(this, "Plane"), 0);
		_Object.addOutputs([_Gate_001]);
		_Gate_001.addInput(_Object, 0);
		_Gate_001.addOutputs([_SetVariable_002]);
		_Gate_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_SetVariable_002.addInput(_Gate_001, 0);
		_SetVariable_002.addInput(_Boolean, 0);
		var _Boolean_001 = new armory.logicnode.BooleanNode(this);
		_Boolean_001.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_Boolean_001.addOutputs([_SetVariable_002]);
		_SetVariable_002.addInput(_Boolean_001, 0);
		_SetVariable_002.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRotation = new armory.logicnode.SetRotationNode(this);
		_SetRotation.property0 = "Euler Angles";
		var _OnUpdate_001 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_001.property0 = "Update";
		_OnUpdate_001.addOutputs([_SetRotation]);
		_SetRotation.addInput(_OnUpdate_001, 0);
		_SetRotation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _LookingAt = new armory.logicnode.LookingAtNode(this);
		var _GetLocation = new armory.logicnode.GetLocationNode(this);
		_GetLocation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation.addOutputs([_LookingAt]);
		_LookingAt.addInput(_GetLocation, 0);
		var _GetLocation_005 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_005.addInput(new armory.logicnode.ObjectNode(this, "Ball"), 0);
		_GetLocation_005.addOutputs([_LookingAt]);
		_LookingAt.addInput(_GetLocation_005, 0);
		_LookingAt.addInput(new armory.logicnode.VectorNode(this, 1.0, 0.0, 0.0), 0);
		_LookingAt.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 1.0), 0);
		_LookingAt.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_LookingAt.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_LookingAt.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_LookingAt.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_LookingAt.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_LookingAt.addInput(new armory.logicnode.BooleanNode(this, false), 0);
		_LookingAt.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_LookingAt.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_LookingAt.addOutputs([_SetRotation]);
		_LookingAt.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_LookingAt.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_SetRotation.addInput(_LookingAt, 0);
		_SetRotation.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_SetRotation.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}